FORMAT: 1A
HOST: http://api.cloud.xxx

# cloud
cloud API is a *video upload management* service for tube paysite webmasters.

# Group Company

Company-related resource for *Company API*.

## Company [/companies/{id}]
A single Company object. It represents a single company

The Company has the following attributes:

- id
- title

# Group User
User-related resources of *User API*.

## User [/users/{id}]
A single User object. It represents a single user.

The User has the following attributes:

- email
- id
- name

# Group Video
Video-related resources of *Video API*.

## Video [/videos/{id}]
A single Video object. The Video resource is the central resource in the Video API. It represents one paste - a single text note.

The Video resource has the following attributes:

- id
- email
- company
- content
- created_at
- updated_at
- description
-
The fields *id*, *created_at* and *updated_at* are assigned by the Video API at the moment of creation.
The *updated_at* field is updated whenever the resource is changed.

+ Parameters
    + id (string) ... unique ID identifier of the Video

+ Model (application/json)

    JSON representation of Video Resource.
    
    + Headers

            Link: <http:/api.cloud.xxx/videos/42>;rel="self"

    + Body

            {
                "id": "42",
                "created_at": "2014-04-14T02:15:15Z",
                "description": "Description of Video",
                "content": "String contents"
            }

## Retrieve a Single Video [GET]
+ Response 200

    [Video][]

## Edit a Video [PATCH]
To update a Video send a JSON with updated value for one or more of the Video resource attributes. All attributes values (states) from the previous version of this video.

+ Request (application/json)

        {
            "content": "Updated file contents"
        }

+ Response 200

    [Video][]

## Delete a Video [DELETE]
+ Response 204

## Videos Collection [/videos{?since}]
Collection of all Videos.

The Video Collection resource has the following attribute:

- total

+ Model (application/json)

    JSON representation of Video Collection Resource.

    + Headers

        Link: <http://api.cloud.xxx:8080/videos?page=1&per_page=10>; rel="first", <http://api.cloud.xxx:8080/videos?page=3&per_page=10>; rel="last", <http://api.cloud.xxx:8080/videos?page=1&per_page=10>; rel="prev", <http://api.cloud.xxx:8080/videos?page=3&per_page=10>; rel="next"

    + Body

            {
                "videos": [
                    {
                        "id": "42",
                        "created_at": "2014-04-14T02:15:15Z",
                        "description": "Description of Video"
                    }
                ],
                "total": 1
            }

### List All Videos [GET]
+ Parameters
    + page (optional, integer) ... Page required.
    + per_page (optional, integer) ... Maximum number of entries.

+ Response 200

    [Videos Collection][]

### Create a Video [POST]
To create a new Video simply provide a JSON hash of the *title* and *description* attributes for the new Video.

+ Request (application/json)

        {
            "description": "Description of Video",
            "title": "Debbie does chocolate"
        }

+ Response 201 (application/json)

    [Video][]
    
# Group Session and State

## Authorization [/v1/session]

### Get state of session and global config [GET]

`GET` the current session state.

If a client is already authenticated, the response will have
a `200` status and include user and account details as well as global
options and endpoint information

If the client is not authenticated, the response will have a `401` status
only include global options and endpoint information. If this response is
received, a login page should be shown.

+ Request
    + Headers

            Cookie: SID=pdteahqeuvo6nmikcokvbl0eq4

+ Response 401 (application/json)

        {
            "endpoints": {
                "default": "https://private-fca8-cloudxxx.apiary-mock.com"
            },
            "options": {
                "foo": "bar"
            }
        }

+ Response 200 (application/json)
    + Headers
    
            Set-Cookie: SID=pdteahqeuvo6nmikcokvbl0eq4; Secure; HttpOnly
    
    + Body

            {
                "endpoints": {
                    "default": "https://private-fca8-cloudxxx.apiary-mock.com"
                },
                "options": {
                    "foo": "bar"
                },
                "user": {
                    "name": "Igor Cumulus",
                    "email": "igor@cloud.xxx"
                },
                "account": {
                    "name": "Cumulus Inc."
                }
            }

### Log In [POST]

To authenticate, a `POST` request with the credentials is sent to the
session endpoint. The server will verify the credentials and
initiate a session.

If validation or authentication fail, the response will have a `400` status
and include details about the error. The response body is formatted according
to http://tools.ietf.org/html/draft-ietf-oauth-v2-28#section-5.2

+ Request (application/json)

        {
            "email": "test@cloud.xxx",
            "password": "foo"
        }

+ Response 200 (application/json)
    + Headers
    
            Set-Cookie: SID=pdteahqeuvo6nmikcokvbl0eq4; Secure; HttpOnly
    
    + Body
    
            {
                "endpoints": {
                    "default": "http://private-68adf-cloudxxxng.apiary-mock.com"
                },
                "options": {
                    "foo": "bar"
                },
                "user": {
                    "name": "Igor Cumulus",
                    "email": "igor@cloud.xxx"
                },
                "account": {
                    "name": "Cumulus Inc."
                }
            }

+ Response 400 (application/json)

        {
            "error": "invalid_grant",
            "error_description": "Invalid username or password"
        }

### Log Out [DELETE]

To end the session, a `DELETE` request is sent. The server invalidates the
session and returns the anonymous session state.

+ Response 200 (application/json)
    + Headers
    
            Set-Cookie: SID=deleted; Secure; HttpOnly; expires=Thu, 01 Jan 1970 00:00:00 GMT

    + Body

            {
                "endpoints": {
                    "default": "https://private-fca8-cloudxxx.apiary-mock.com"
                },
                "options": {
                    "foo": "bar"
                }
            }

# Group Videos

## Videos [/v1/videos-x]

### Get list of videos [GET]

+ Response 200 (application/json)

        x

## Create New Video [/v1/videos]

The upload process will be split into distinct steps:

 * Client creates new video
 * Client enters the video metadata
 * Client uploads the raw video file to Amazon S3
 * Server validates the metadata and raw video file
 * Client starts the upload process
 * Server converts the raw video for each Tube
 * Server upload the converted video to each Tube
 * Client shows progress and status overall and for each Tube

### Create a new empty video [POST]

+ Response 200 (application/json)

        {
            "id": "293881",
            "url": "https://private-fca8-cloudxxx.apiary-mock.com/v1/videos/293881",
            ...
        }

## Group Create New Video Cont

### PATCH /v1/videos/{video_id}

Save draft

+ Response 200 (application/json)

        {
            "id": "293881",
            "url": "https://private-fca8-cloudxxx.apiary-mock.com/v1/videos/293881",
            ...
        }

### DELETE /v1/videos/{video_id}

Delete draft

+ Response 204

### POST /v1/videos/{video_id}/process

When the video metadata is complete and the video file has been uploaded,
the client notifies the server that the video can now be published to the
Tube sites

+ Response 204

## Group Create New Video : File Uploads

To avoid unnecessary traffic through our network, video files are posted
directly to Amazon S3. The client requests all necessary details and prepares
an upload form with the received data.

See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTForms.html
for more information.

### POST /v1/videos/{video_id}/upload/prepare

Prepare upload form

+ Response 200 (application/json)

        {
            "id": "DmqRpLQSNSoYjuXWm2",
            "url": "https://private-fca8-cloudxxx.apiary-mock.com/v1/293881/uploads/DmqRpLQSNSoYjuXWm2",
            "status": "pending",
            "form": {
                "action": "https://cldsys-dev.s3.amazonaws.com/",
                "method": "post",
                "enctype": "multipart/form-data"
            },
            "fields": {
                "key": "/uploads/293881/DmqRpLQSNSoYjuXWm2/${filename}",
                "x-aws-meta-video": "293881",
                "x-aws-meta-upload": "DmqRpLQSNSoYjuXWm2",
                "AWSAccessKeyId": "AKIAIOSFODNN7EXAMPLE",
                "policy": "eyAiZXhwaXJhdGlvbiI6ICIyMDA3LTEyLTAxVDEyOjAwOjAwLjAw...",
                "signature": "0RavWzkygo6QX9caELEqKi9kDbU="
            },
            "file_field": "file"
        }

### POST /v1/videos/{video_id}/upload/process

Once the file is uploaded to S3, the client notifies the server that the
upload is complete and should be finalized

+ Response 204

