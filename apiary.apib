FORMAT: 1A
HOST: http://api.cloud.xxx

# Cloud.xxx
The cloud.xxx API is a *video upload management* service for tube paysite webmasters.

# Group Session and State

## Authorization [/session]

### Get state of session and global config [GET]

`GET` the current session state.

If a client is already authenticated, the response will have
a `200` status and include user and account details as well as global
options and endpoint information

If the client is not authenticated, the response will have a `401` status
only include global options and endpoint information. If this response is
received, a login page should be shown.

+ Request

    + Headers

            Cookie: SID=pdteahqeuvo6nmikcokvbl0eq4

    + Response 401 (application/json)

        {
            "endpoints": [],
            "config": {
                "env": "development",
                "tags": [
                    {
                        "title": "Amateur",
                        "id": 1,
                        "slug": "amateur"
                    },
                    {
                        "title": "BBW",
                        "id": 4,
                        "slug": "bbw"
                    },
                    {
                        "title": "Coed",
                        "id": 12,
                        "slug": "coed"
                    },
                    {
                        "title": "Young/Old",
                        "id": 69,
                        "slug": "young-old"
                    }
                ]
            },
            "user": {
                "id": 1,
                "name": "Test User",
                "email": "test@cloud.xxx"
            },
            "company": {
                "id": 1,
                "title": "Cumulus, Inc."
            }
        }

+ Response 200 (application/json)

    + Headers

            Set-Cookie: SID=pdteahqeuvo6nmikcokvbl0eq4; Secure; HttpOnly

    + Body

            {
                "endpoints": {
                    "default": "https://private-fca8-cloudxxx.apiary-mock.com"
                },
                "options": {
                    "foo": "bar"
                },
                "user": {
                    "name": "Igor Cumulus",
                    "email": "igor@cloud.xxx"
                },
                "account": {
                    "name": "Cumulus Inc."
                }
            }

### Log In [POST]

To authenticate, a `POST` request with the credentials is sent to the
session endpoint. The server will verify the credentials and
initiate a session.

If validation or authentication fail, the response will have a `400` status
and include details about the error. The response body is formatted according
to http://tools.ietf.org/html/draft-ietf-oauth-v2-28#section-5.2

+ Request (application/json)

        {
            "email": "test@cloud.xxx",
            "password": "foo"
        }

+ Response 200 (application/json)

    + Headers

            Set-Cookie: SID=pdteahqeuvo6nmikcokvbl0eq4; Secure; HttpOnly

    + Body

            {
                "endpoints": {
                    "default": "http://private-68adf-cloudxxxng.apiary-mock.com"
                },
                "options": {
                    "foo": "bar"
                },
                "user": {
                    "name": "Igor Cumulus",
                    "email": "igor@cloud.xxx"
                },
                "account": {
                    "name": "Cumulus Inc."
                }
            }

+ Response 400 (application/json)

        {
            "error": "invalid_grant",
            "error_description": "Invalid username or password"
        }

### Log Out [DELETE]

To end the session, a `DELETE` request is sent. The server invalidates the
session and returns the anonymous session state.

+ Response 200 (application/json)

    + Headers

            Set-Cookie: SID=deleted; Secure; HttpOnly; expires=Thu, 01 Jan 1970 00:00:00 GMT

    + Body

            {
                "endpoints": {
                    "default": "https://private-fca8-cloudxxx.apiary-mock.com"
                },
                "options": {
                    "foo": "bar"
                }
            }


# Group Company

Company-related resource for *Company API*.

## Company resource /companies/{id}]

A single Company object. It represents a single company
The Company has the following attributes:

- id
- title
- created_at
- updated_at


+ Parameters

    + id (integer) ... unique ID of the company.

+ Model (application/json)

    JSON representation of the company resource.

    Request (application/json)

        + Body

            {
                "id": 123,
                "title": "From, inc.",
                "created_at": "2014-07-16",
                "updated_at": "2014-07-20"
            }

### Get a single company [GET]

+ Response 200

    [Company][]


# Group User

User-related resources of *User API*.

## User resource [/users/{id}]
A single User object. It represents a single user.

The User has the following attributes:


- id
- company_id
- name
- email
- last_login_at
- created_at
- updated_at

### Get a single user [GET]

+ Parameters
    + id (integer) ... The unique ID of the user

+ Response 200 (application/json)

        {
            "id": 1,
            "company_id": 1,
            "name": Test User,
            "email": test@cloud.xxx,
            "last_login_at": NULL,
            "created_at": 2014-07-16 09:10:45,
            "updated_at": 2014-07-20 09:11:25,
        }

# Group Video
Video-related resources of *Video API*.

## Video [/videos/{id}]
A single Video object. The Video resource is the central resource in the Video API. It represents one paste - a single text note.

The Video resource has the following attributes:

- id
- stats
- title
- duration
- title
- email
- company
- content
- created_at
- updated_at
- description
- thumbnail

The fields *id*, *created_at* and *updated_at* are assigned by the Video API at the moment of creation.
The *updated_at* field is updated whenever the resource is changed.

+ Model (application/json)

    JSON representation of Video Resource.

    + Headers

            Link: <http:/api.cloud.xxx/videos?page=1>; rel="prev",<http:/api.cloud.xxx/videos?page=3>; rel="next",<http:/api.cloud.xxx/videos?page=1>; rel="first",<http:/api.cloud.xxx/videos?page=9>; rel="last"

    + Body

            {
                "id": 1,
                "stats": {
                    "plays": 59510,
                    "rating": 0.13,
                    "clicks": 45832
                },
                "title": "Lorem duis est exercitation enim dolor dolor.",
                "duration": 2511,
                "tags": [
                    { "id": 1, "slug": "fugiat" },
                    { "id": 2, "slug": "nostrud" },
                    { "id": 3, "slug": "aliqua" },
                    { "id": 4, "slug": "elit" },
                    { "id": 5, "slug": "exercitation" },
                    { "id": 6, "slug": "dolor" }
                ],
                "status": "failed",
                "thumbnail": "https://s3.amazonaws.com/cldsys-dev/static/thumbnail.png"
            }


## Retrieve a Single Video [GET]

+ Parameters
    + id (string) ... unique ID identifier of the Video

+ Response 200

    [Video][]

## Edit a Video [PATCH]
To update a Video send a JSON with updated value for one or more of the Video resource attributes. All attributes values (states) from the previous version of this video.

+ Parameters
    + id (string) ... unique ID identifier of the Video

+ Response 200

    [Video][]

## Create a Video [POST]

The upload process will be split into distinct steps:

 * Client creates new video
 * Client enters the video metadata
 * Client uploads the raw video file to Amazon S3
 * Server validates the metadata and raw video file

 * Client starts the upload process
 * Server converts the raw video for each Tube
 * Server upload the converted video to each Tube
 * Client shows progress and status overall and for each Tube

To create a new Video simply provide a JSON hash of the *title* and *description* attributes for the new Video.

+ Request (application/json)

    + Body

            {
                "title": "Loerm ourf mwwe",
                "description": "Soam kleu lout"
            }

+ Response 200 (application/json)

        {
            "id": "293881",
            "url": "https://private-fca8-cloudxxx.apiary-mock.com/videos/293881",
            ...
        }

### POST /videos/{id}/process

When the video metadata is complete and the video file has been uploaded,
the client notifies the server that the video can now be published to the
Tube sites

+ Parameters
    + id (integer) ... Unique ID of the video

+ Response 204

## Videos Collection [/videos{?page=1&per_page=10}]
Collection of all Videos.

The Video Collection resource has the following attribute:

- total
- videos

+ Parameters
    + id (string) ... unique ID identifier of the Video
    + page (optional, integer) ... current page of results
    + per_page (optional, integer) ... maximum number of results per page

+ Model (application/json)

    JSON representation of Video Collection Resource.

    + Headers

            Link: <http://api.cloud.xxx:8080/videos?page=1&per_page=10>; rel="first", <http://api.cloud.xxx:8080/videos?page=3&per_page=10>; rel="last", <http://api.cloud.xxx:8080/videos?page=1&per_page=10>; rel="prev", <http://api.cloud.xxx:8080/videos?page=3&per_page=10>; rel="next"

    + Body

            {
                "id": 1,
                "stats": {
                    "plays": 59510,
                    "rating": 0.13,
                    "clicks": 45832
            },
            {
                "title": "Lorem irure duis dolor aute sunt aliqua enim duis est exercitation enim dolor dolor.",
                "duration": 2511
            }
                "tags": [
                    { "id": 1, "slug": "fugiat" },
                    { "id": 2, "slug": "nostrud" },
                    { "id": 3, "slug": "aliqua" },
                    { "id": 4, "slug": "elit" },
                    { "id": 5, "slug": "exercitation" },
                    { "id": 6, "slug": "dolor" }
                ],
                "status": "failed",
                "thumbnail": "https://s3.amazonaws.com/cldsys-dev/static/thumbnail.png"
            }

### Get list of videos [GET]

+ Response 200 (application/json)

        + Body

            [Video][]


The upload process will be split into distinct steps:

 * Client creates new video
 * Client enters the video metadata
 * Client uploads the raw video file to Amazon S3
 * Server validates the metadata and raw video file
 * Client starts the upload process
 * Server converts the raw video for each Tube
 * Server upload the converted video to each Tube
 * Client shows progress and status overall and for each Tube

### Create a new empty video [POST]

+ Response 200 (application/json)

        {
            "id": "293881",
            "url": "https://private-fca8-cloudxxx.apiary-mock.com/videos/293881",
            ...
        }


## Group File Uploads

To avoid unnecessary traffic through our network, video files are posted
directly to Amazon S3. The details are prepared in the browser or client enabling this
to happen.

See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTForms.html
for more information.

### POST /videos/{video_id}/upload/prepare

Prepare upload form

+ Parameters

  + id (integer) ... Unique ID of video

+ Response 200 (application/json)

        {
            "id": "DmqRpLQSNSoYjuXWm2",
            "url": "https://private-fca8-cloudxxx.apiary-mock.com/293881/uploads/DmqRpLQSNSoYjuXWm2",
            "status": "pending",
            "form": {
                "action": "https://cldsys-dev.s3.amazonaws.com/",
                "method": "post",
                "enctype": "multipart/form-data"
            },
            "fields": {
                "key": "/uploads/293881/DmqRpLQSNSoYjuXWm2/${filename}",
                "x-aws-meta-video": "293881",
                "x-aws-meta-upload": "DmqRpLQSNSoYjuXWm2",
                "AWSAccessKeyId": "AKIAIOSFODNN7EXAMPLE",
                "policy": "eyAiZXhwaXJhdGlvbiI6ICIyMDA3LTEyLTAxVDEyOjAwOjAwLjAw...",
                "signature": "0RavWzkygo6QX9caELEqKi9kDbU="
            },
            "file_field": "file"
        }

### POST /videos/{video_id}/upload/process

Process the upload

Once the file is uploaded to S3, the client notifies the server that the
upload is complete and should be finalized

+ Parameters

  + id (integer) ... Unique ID of video

+ Response 204
